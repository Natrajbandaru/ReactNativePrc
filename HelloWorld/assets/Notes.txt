=> Core Components In React 
   View         <div>
   ScrollView   <div>    (Used for Scrolling div)
   Text         <p>
   TextInput    <input type="text">
   Image        <img>

            ->-> View  
            is like a div we can create a squeres and we can perform a Nested View

            ->-> Text:
            Text component is used for a makeing text 

            ->->  Image Components
            This Image Component enabels the varioes types of image in ReactNative including
                @StaticImages
                @NetworkImages
                @Image From localDesk such as camera roll
            
                const logoImg=require("./assets/favicon.png") (FOR IMAGE PATH)
                Compoents:
                Image   (Normal Image, If Image is From Link we need to add uri)
                ImageBackground(We can write or we can do any thindg in above Image)
                SomeProps:
                source

            ->-> ScroolView Component
            ScroolView Component gives a scrolling functionality
            ScrollView required a bounded height to function properly

            ->-> Input Text
            Input Text is Used for inpute type = text
        
    ->Button Component
      The buttion component is used for allow user to click and get functionality
      The Button Component has platform-spesific rendering for iOS and Android

        Compoents:
           Button     
        SomeProps:
           title
           onPress
           color
           disabled


    -> Pressabel 
     *pressabel is a wrapper component that detects various stages of pree integration on children.
     *This Pressabel component is Used action should be done while pressing any thing .
     *It is also used as Button 
      Eg(Image, Text, etc..)
      ScrrenShot c:\Users\ASUS\Pictures\Screenshots\Prees Event ScrrenShot.png
      Types of Props:
          onPress
          onPressOut
          onLongPress(500ms)
          onLongPressOut(500ms)


   -> Modal Component
     Modal is Used to generate some important senario
     Types of props :
        viabel=true(default),false
        animation=none(default),slide,fade
        onRequestClose(It is a Function used for clicking Back button  It well close )
        presentationStyle(It well perfor only in iOS)

        import { useState } from "react";
        import { View,Button,ScrollView, Modal,Text } from "react-native";
        const logoImg=require("./assets/favicon.png")
        export default function App(){
        const [isModalVisabile,setIsModalVisabel]=useState(false);
        return( 
            <View style={{flex:1,backgroundColor:"plum",padding:40}}>
            <ScrollView >
                <Button  
                title="Press" 
                onPress={()=>{setIsModalVisabel(true)}} 
                color="midnightblue"
                />   
                <Modal 
                visible={isModalVisabile} 
                onRequestClose={()=>setIsModalVisabel(false)}
                animationType="slide"
                presentationStyle="formSheet"
                >
                    <View style={{flex:1,backgroundColor:"lightblue",padding:60}}> 
                    <Text>Modal Contant</Text>
                    <Button title="close" color="midnightblue" onPress={()=>{setIsModalVisabel(false)}}></Button>
                    </View>
                </Modal>
            </ScrollView>        
        </View>
        );
        }

    ->   StatusBar
       =>status bar is used for design a wifi,network,battery in above of screen
         Note: Shown in Only Androide
            Types of Props
            backgroundColor
            barStyle
            disabled

    ->Activity Indicator
       Activity indicatior is a spinner which is Used for a loading a data

       Component
        ActivityIndicator
       props
        animated(by default true you can make as false)
        color
        size

   ->Alert
      Alert are Used for geting a right response by indicationg message

       Components: It is Not a componet it is a class
          Alert.alert("HEADING","MESSAGE",[{text:cancel,function for cancel sinario},{text:ok,function for cancel sinario}])

   ->Custom Component
       Note: we can get a "children" and "style" in custom component
             chuldren:  <Text>Hello</Text> Hello is the children
             style   :   style of parent tag
        ex1(Program 1):
        export default  Greet=({names,age,style,children})=>{
            return(
                <View>
                    <Text>Hello,{names}, {age}</Text>
                </View>
                );
            }
        import { View,Button,ScrollView,Alert } from "react-native";
        import Greet from "./Components/Greet";
        export default function App(){
                return( 
                <View style={{padding:40,flex:1,backgroundColor:"plum"}}>
                    <Greet names="BruceLee" age="20"/>
                    <Greet names="Clerk int"/>
                </View>
                );
            }
        ex2:(By Children and style)    
            export default function Box({children,style}){
                return(
                    <View style={[styles.box,style]}>
                    <Text style={styles.text}>{children}</Text> 
                    </View>
                );
            }            
            export default function App(){
            return( 
                <View style={styles.container}>
                    <Box style={{backgroundColor:"red" }} >Box3</Box>               
                </View>
            );
            }
    -> SafeAreaView (Removeing Bar in above)

->Styleing In ReactNative
   React Native DoesNot use CssStyleing
   Names are Written as CamelCase
   Ex: backgroundColor (Native) = background-color (Css)   
   
   InlineStyle(Normal Inline StyleComponent)
   StyleShhetApi
      ->Style Variouse coreComponent
      ->Styleing Acroos Ios andAndroid
      -> Easy to intreact and easy to read the code by useing stylesheet
   

 -> StylesSheet in array
    If we are rendering two styles in one useing array
    Note : In Array it well take a last one priority
 
-> Style Inhertenace
    Note: style inheretance well Work only some data
    In html Css(It well inharet for a paragrh tag)
       <div style={color:white}>
          <P>
            text me
          </P>
       <div>
     But in react Native  it well Not But it well posibel for TEXT TO TEXT       
       <View style={color:white}>
          <Text>
            text me
          </Text>
       </View>
         
        <Text style={color:white}>
           TextData
          <Text>
            text me
          </Text>
       </Text>

-> Style Key Components
   
   width:10 or 10%
   height:10 or 10%
   borderRadus
      ViewCompnent: It well workFor Both android and Ios
      TextComponent: It well Work only for android Not Ios 
    borderWidht(2px solid red It well Not Work) 
    boredrColor
    margen               
    margen(s,e,l,r)
    margenHorizontal
    margenVertical

    padding
    padding(s,e,l,r)
    paddingHorizontal
    paddingVertical

    Shadows:
        shadowcolor(workBoth android and Ios)
        shadowOffset:{(Only Ios)
            width:6,
            height:6
            },
            shadowOpacity:0.6,
            shadowRadius:4
        elevation(only android)


->(Flex) LayOuts In ReactNative
  
  *In ReactNative Layouts are contained useing FlexBox
  *Flexbox is a on diminsonal to arrange a item with in a container
  *whit in a flexbox we can arrange a item in horezontal and vartical

   flex container
   flex items

   Axex in FlexBox:
     main axis  (horezontal)
     cross axis (Vertical)


    import { View,StyleSheet } from "react-native";
    import Box from "./Components/Box";
    export default function App(){
    return( 
        // <View style={{backgroundColor:"plum", flex:1}}></View>
        <View style={styles.container}>
            <Box style={{backgroundColor:"red" ,flex:1}} >Box3</Box>
            <Box style={{backgroundColor:"green", flex:1}} >Box4</Box>
            <Box style={{backgroundColor:"orange",flex:1}} >Box5</Box>
            <Box style={{backgroundColor:"lightblue",flex:1}} >Box6</Box>
        </View>
    );
    }
    const styles = StyleSheet.create({
    container:{
        flex:1,
        backgroundColor:"plum",
        marginTop:20,
        borderWidth:6,
        borderColor:"black"
    }
    })
   
   -> Flex Direction(Used to container ,How the Box Direction should be)
      * Flex direction is how the flex items are detirmined from top to bottom or left to write (cross)
      *By default top to bottom

      styel:
        flexDirection:"colum"  (default)
        flexDirection:"colum-reverse"
        flexDirection:"row"
        flexDirection:"row-reverse"

    ->JestifyContant:( used to the container,we can give container middel and around)
      style:
        justifyContent:"center","space-between","flex-start","flex-end",etc...
    
    ->AlignItem:(Used to Container, same as JustifyContant But in Perpendicular Direction)
       style:
          alignItem:"center","space-between","flex-start","flex-end",baseline(According to text,Only work for row),etc...

     ->AlignSelf(Used For Items in container, It contains same values in AlignItem)
        <View style={styles.container}>
            <Box style={{backgroundColor:"red", alignSelf:"flex-start"}} >Box3</Box>
            <Box style={{backgroundColor:"green",alignSelf:"flex-end"}} >Box4</Box>
            <Box style={{backgroundColor:"orange",alignSelf:"center"}} >Box5</Box>
            <Box style={{backgroundColor:"lightblue"}} >Box6</Box>
       </View>
    
    ->FlexWrap(Used To container if No space is Present it well come to side)
        FlexWrap : "wrap","wrap-reverse"
        Note: FlexWrap well go Side, FlexBase well adjest in it 

    ->AlignContaint(Used for Container where we need to place CrossAxis)
        alignContaint:"center",strech,space-between
        Note: AlignContaint and JustifyContent are same, But alignConent contains Cross Axis

    ->gap (Used to container To get Gap between Row and coloum)
       gap:10,
       row-gap:10,
       colum-gap:10
    
    ->FlexBases(Used for item of container ,For Increseing a hight)
      Flex-bases:140

    ->flexShrink(Used for Item , If container is Larger then it well adject by giveing flexShink)
      flexShink:1,2,3...
      Note: FlexWrap well go Side FlexBase well adjest in it 

    ->flexGrow(Used For Item, Amound of item grow in a container)
       flexGrow:1,2,3,4...

    ->Positon absolute and relative (left and Right)
    position relative:(default) it is also change only that particular item well change
    position absolute: is used to we can modify any item with changeing of all item
        left,right

=> Dynamic User Interfase
    To Resolve it there is a Dimension Api in reactNative
    Diminsion Api well provide divice size and create responsive styles
     
    Orentation :
    1) Potreate  Mode (Vertical Normal)
    2) Landscape Mode (Horizontal)

    FoldabelPhones

    // Scrren : well get entire screen with battery and hotspot
    // window: well get UI with leaving a battery and wifi
    const windowWidth=Dimensions.get("window").width;
    const windowHight=Dimensions.get("window").height;

    -> There has a Drawback when we are changeing to potrate mode and landscape Mode
       To clear we use a useEffect
       Note:In app.js Make it is a default for a potrate 
       "orientation": "defult"

       To resolve We use :
       component: useWindowDimensions

    ->SafeAreaView:
       * SafeAreaView is a component used for ios and android it well design a application from downside of battery and wifi(StatusBar).
       * Used for Both but Most used for Ios

    ->PlatFormSpesificCode
     *when we are useing platform like android and Ios code differes to each other different to rectify the code platformspicefic is came
     *React Native offeres two approches:
       =>platform-specific code
       =>platform-specific file extension

       Approches:
        =>platform-specific code
            Approch 1)
                paddingTop :Platform.OS==="android"? 10: 0,
            Approch 2)
                paddingTop :Platform.OS==="android"? 10: 0,
                text:{
                        fontSize:24,
                        ...Platform.select({
                        ios:{
                            color:"purple",
                            fontSize:24,
                            fontStyle:"italic"
                        },
                        android:{
                            color:"blue",
                            fontSize:30,
                            alignItem:"center",
                        }
                        }),
                    },
        =>platform-specific file extension
            Approch 3)  Custom Component Ios And Android Folder Imports
                Note: a) Make shore the file name and component should be same to both ios and android
                      b) Make Double import at last of folder to access
                         ex:import CustomButton from './Components/CustomButton/CustomButton';

=> Rendering Lists
        -> Rendering Lists are More Assential to an application
        ->List Contains Products or any Other Item we can Render easely
    Note: Normal Map list Render Total

   ->FlatList
        ->Flat list render only shown in the screen 
        ->It well Not render Total

        Component:
           FlatList
        props:
           data  (Used to set the items)
           renderItem (Function render the items)
           keyExtractor (Key for a seperate item)
           horizontal  (If you  make for a horizontal)
           
           ItemSeparatorComponent(Item Seperate by a padding)
           ListEmptyComponent  (If empty list present message)
           ListHeaderComponent (Header of List)
           ListFooterComponent (Fotter of List)

           <FlatList 
            data={pokimanList}
            renderItem={({item})=>{
              console.log(item.id)
              return(
                <View style={styles.card} key={item.id}>
                   <Text style={styles.cardText}>{item.type}</Text>
                    <Text style={styles.cardText}>{item.name}</Text>
                 </View>
              );
            }}
            keyExtractor={(item,index)=>item.id.toString()}
           // horizontal
           ItemSeparatorComponent={<View style={{height:16}}/>}
           ListEmptyComponent={<Text>No Items Found</Text>}
           ListHeaderComponent={<Text style={styles.header}>Pokiman List</Text>}
           ListFooterComponent={<Text style={styles.header}>Pokiman List Bootom</Text>}
          />   

    ->  Section List:
           ->It is used for rendering Section list
           ->It is used props  like flat list but in some function

       Component:
           SectionList
        props:
          Note: Props used in SectionList is in Function
           data  (Used to set the items)
           renderItem (Function render the items)
           keyExtractor (Key for a seperate item)
           horizontal  (If you  make for a horizontal)
           
           ItemSeparatorComponent(Item Seperate by a padding)
           ListEmptyComponent  (If empty list present message)
           ListHeaderComponent (Header of List)
           ListFooterComponent (Fotter of List)

          <SectionList
            sections={groupedPokimonList}
            renderItem={({item})=>{
                return(
                <View style={styles.card} >
                    <Text style={styles.cardText}>{item}</Text>
                </View>
                )
            }}
            renderSectionHeader={({section})=>{
                return(
                <Text style={styles.sectionHeaderText}>{section.type}</Text>
                ) 
            }}
            ItemSeparatorComponent={()=><View style={{height:16}}/>}
            SectionSeparatorComponent={()=><View style={{height:10}}/>}
            />    

=>Inputs ReactNative Vs Html web
  -> In web There are Number of TextInput Fields
  -> For Example inputFields, textArea,dropdowns etc...

  ->In reactNative thatmuch Not.
    The Core reactNative provides only TextInput and Switch
    Expo extends toolkit, Offereing additional Components like CheckBox and datePickers, etc..

  Forms in RN:
    Managing From state : Controlling the dynamic Data with in Forms
    Handling Form Validation: Encureing the integrity and Valid Users input
    Displaying ValidationMethod
    SubmitingFormData

    ->TextInput
       Component:
          TextInput

       props:
            placeholder="Email@.com"
            secureTextEntry (. in posword)
            keyboardType="numeric" (According to Your textInput)
            autoCorrect={false}  (It well auto correct False)
            autoCapitalize="none"
         
            <TextInput  style={styles.input} value={name}  onChangeText={setName}
                placeholder="Email@.com"
                secureTextEntry
                keyboardType="numeric"
                autoCorrect={false}
                autoCapitalize="none"
            />

    -> SwitchComponent(Toggle Button)
       components:

       props:

    -> KeyBordAvoidingView
       -> Used for GetText keybord text greater
        components:
          KeyboardAvoidingView
        props:
          keyboardVerticalOffset=100

=> NetWorking
    
    async  : We use for Unsyncronize
    await  : In a async we well use await for wate a minute

     ex1: 
       const funResponse = async ()=>{
       }
       const response = await funResponse.json()
    
    -> Fetching Data for Url:
      ex1: 
      try{
            const response = await fetch(
                `https://jsonplaceholder.typicode.com/posts?_limit=${limit}`
            );
            const data =await response.json();
        }catch(error){
            console.error(error);
            setError("Failed to fetch post list")
        }
    
    ->Post Url
      const response= await fetch("https://jsonplaceholder.typicode.com/posts",{
        method:"post",
        headers:{
          "Content-Type":"application/json"
        },
        body:JSON.stringify({
          title:postTitle,
          body:postBody
        })
      })
      const newPost =await response.json();

=>Navigation(This Moves in differenet Screen to Access)
   -> In ReactNative Navigation Works on ReactNativeNavigation
   -> This ReactNativeNavigation Works on both expo and ReactNative Project
 
    Types Of Navigation:
        StackNavigation: (Top of screen )it is used for transction between Screenshots
        DrawerNavigation:(In side the screen) side of the screen
        A tab Navigation:(Bottom) as a bottom tab

    1) StackNavigator:
       -> Stack Navigator well desplay screen forwording one to one
            In ReactNative StackNavigator provide two
                a) Stack Navigator(JAVASCRIPT NAVIGATOR, Perfomance low, high Level coustamization)
                b) Native Stack Navigator(NATIVE NAVIGATOR ,Perfomance High ,  low Level coustamization)
        Note: We well focus on NativeStackNavegator

        imports:
           const Stack = createNativeStackNavigator();

        Components:
          NavigationContainer
               
          Stack.Navigator
               props:
                 initialRouteName(Default Rout Name to exest in screen)
                 screenOptions (Disigning For All the Pages) Like Option Only

          Stack.screen( used for Different Navigator)
               props:
                  name   (Title of Component)
                  component (Name Of Component)
                  options  (Disigning For the only perticular component)
                      It is a Json Contains this Props to Design Header
                            headerStyle
                            headerTintColor
                            headerTitleStyle
                            headerRight
                            contentStyle
            
           => Route Between Defferent Screen
              Note: We can send One to another Screen By Two Different ways
                    WE can Navigate By UseNavegator(only particular screen) Hook and Navigation Prop(All for the screen)
                  1) Navigator prop           myFunction({navigation})
                  2) useNavigation Hook      const navigation=useNavigation();

                    <Button title="Go About" onPress={()=>navigation.navigate("About",{
                       name:"vishwas"
                    })}></Button>

                    Note: To access a Name we use Rout Prop
                     const {name} = route.params;
         
          => To Display Dynamic Title to Screens
             Hook called
               useLayoutEffect(()=>{
                    navigation.setOptions({
                        title:name
                    },[navigation,name])
                })

    2)Drawer Navigation:
      Drawer Navegation Used for Hiden Menue from Slideing Screen
      imports:
           const Stack = createDrawerNavigator();

        
      Component(Same as a stack navigation):
          Drawer.Navigator

      props:
         name
         component
         options

   -> Tab Navigator
       Tab Navigator showns a bottom of Screens
       

          
         
       






            





       
    






       
 
       
       


    






       






         


       


